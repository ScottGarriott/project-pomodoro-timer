{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\owner\\\\Thinkful\\\\qualified-assignments\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\PomodoroTimerView.js\";\nimport React from \"react\";\nimport { minutesToDuration } from \"../utils/duration\";\nimport { secondsToDuration } from \"../utils/duration\";\nimport useInterval from \"../utils/useInterval\";\n\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return { ...prevState,\n    timeRemaining\n  };\n}\n\nfunction PomodoroTimerView({\n  isTimerRunning,\n  session,\n  durations,\n  setSession,\n  ariaValues,\n  setAriaValues,\n  initialAraiValues\n}) {\n  function nextSession(focusDuration, breakDuration) {\n    /**\r\n     * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\r\n     */\n    if (session && session.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60,\n        toatalSessionTime: breakDuration * 60\n      };\n    }\n\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60,\n      toatalSessionTime: focusDuration * 60\n    };\n  }\n\n  useInterval(() => {\n    if (session.timeRemaining === 0) {\n      new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n      return setAriaValues(initialAraiValues), setSession(nextSession(durations.focusDuration, durations.breakDuration));\n    }\n\n    setAriaValues({\n      ariaValueNow: ariaValues.ariaValueNow += 100 / session.toatalSessionTime,\n      percentComplete: ariaValues.percentComplete += 100 / session.toatalSessionTime\n    });\n    setSession(nextTick);\n  }, isTimerRunning ? 1000 : null);\n\n  const sessionTotalDurationView = label => {\n    const result = label === \"Focusing\" ? durations.focusDuration : durations.breakDuration;\n    return minutesToDuration(result);\n  };\n\n  if (session && session.label !== \"\") {\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      \"data-testid\": \"session-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 21\n      }\n    }, session.label, \" for \", sessionTotalDurationView(session.label), \" minutes\"), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"lead\",\n      \"data-testid\": \"session-sub-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 21\n      }\n    }, secondsToDuration(session && session.timeRemaining), \" remaining\"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"progress\",\n      style: {\n        height: \"20px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"progress-bar\",\n      role: \"progressbar\",\n      \"aria-valuemin\": \"0\",\n      \"aria-valuemax\": \"100\",\n      \"aria-valuenow\": ariaValues.ariaValueNow // TODO: Increase aria-valuenow as elapsed time increases\n      ,\n      style: {\n        width: `${ariaValues.percentComplete}%`\n      } // TODO: Increase width % as elapsed time increases\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 21\n      }\n    })))));\n  }\n\n  return null;\n}\n\n;\nexport default PomodoroTimerView;","map":{"version":3,"sources":["C:/Users/owner/Thinkful/qualified-assignments/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/PomodoroTimerView.js"],"names":["React","minutesToDuration","secondsToDuration","useInterval","nextTick","prevState","timeRemaining","Math","max","PomodoroTimerView","isTimerRunning","session","durations","setSession","ariaValues","setAriaValues","initialAraiValues","nextSession","focusDuration","breakDuration","label","toatalSessionTime","Audio","play","ariaValueNow","percentComplete","sessionTotalDurationView","result","height","width"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { minutesToDuration } from \"../utils/duration\";\r\nimport { secondsToDuration } from \"../utils/duration\";\r\nimport useInterval from \"../utils/useInterval\";\r\n\r\nfunction nextTick(prevState) {\r\n    const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\r\n    return {\r\n      ...prevState,\r\n      timeRemaining,\r\n    };\r\n  }\r\n\r\nfunction PomodoroTimerView ({  isTimerRunning, session, durations, setSession,  ariaValues, setAriaValues, initialAraiValues }) {\r\n   \r\n\r\n    function nextSession(focusDuration, breakDuration) {\r\n        /**\r\n         * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\r\n         */\r\n          if (session && session.label === \"Focusing\") {\r\n            return {\r\n              label: \"On Break\",\r\n              timeRemaining: breakDuration * 60,\r\n              toatalSessionTime: breakDuration * 60\r\n            };\r\n          }\r\n          return {\r\n            label: \"Focusing\",\r\n            timeRemaining: focusDuration * 60,\r\n            toatalSessionTime: focusDuration * 60\r\n          };\r\n      }\r\n    \r\n      useInterval(() => {\r\n        if (session.timeRemaining === 0) {\r\n          new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\r\n          return (\r\n            setAriaValues(initialAraiValues),\r\n            setSession(nextSession(durations.focusDuration, durations.breakDuration))\r\n            );\r\n        }\r\n        setAriaValues({\r\n          ariaValueNow: (ariaValues.ariaValueNow += ((100 / session.toatalSessionTime))),\r\n          percentComplete: (ariaValues.percentComplete += ((100 / session.toatalSessionTime)))\r\n          })\r\n            setSession(nextTick);\r\n            \r\n      },\r\n      isTimerRunning ? 1000 : null\r\n    );\r\n\r\n    const sessionTotalDurationView = (label) => {\r\n        const result = label === \"Focusing\" ?  durations.focusDuration : durations.breakDuration;\r\n        return minutesToDuration(result);\r\n    }\r\n\r\n    if(session && session.label !== \"\"){\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"row mb-2\">\r\n                <div className=\"col\">\r\n                    <h2 data-testid=\"session-title\">\r\n                    {session.label} for {sessionTotalDurationView(session.label)} minutes\r\n                    </h2>\r\n                    <p className=\"lead\" data-testid=\"session-sub-title\">\r\n                    {secondsToDuration(session && session.timeRemaining)} remaining\r\n                    </p>\r\n                </div>\r\n                </div>\r\n                <div className=\"row mb-2\">\r\n                <div className=\"col\">\r\n                    <div className=\"progress\" style={{ height: \"20px\" }}>\r\n                    <div\r\n                        className=\"progress-bar\"\r\n                        role=\"progressbar\"\r\n                        aria-valuemin=\"0\"\r\n                        aria-valuemax=\"100\"\r\n                        aria-valuenow={ariaValues.ariaValueNow} // TODO: Increase aria-valuenow as elapsed time increases\r\n                        style={{ width: `${ariaValues.percentComplete}%` }} // TODO: Increase width % as elapsed time increases\r\n                    />\r\n                    </div>\r\n                </div>\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n    return null;\r\n};\r\n\r\nexport default PomodoroTimerView;"]},"metadata":{},"sourceType":"module"}