{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\owner\\\\Thinkful\\\\qualified-assignments\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport PomodoroTimeAdjusters from \"../PomodoroTimeAdjusters\";\nimport PomodoroTimerView from \"../PomodoroTimerView\";\nimport PomodoroStartStop from \"./PomodoroStartStop\"; // These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\n\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return { ...prevState,\n    timeRemaining\n  };\n}\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\n\n\nfunction Pomodoro({\n  isTimerRunning,\n  setIsTimerRunning,\n  durations,\n  setSession,\n  session,\n  initialSessionState,\n  ariaValues,\n  setAriaValues,\n  initialAraiValues,\n  setDurations\n}) {\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n  function nextSession(focusDuration, breakDuration) {\n    /**\n     * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n     */\n    return currentSession => {\n      console.log(session.label);\n\n      if (currentSession.label === \"Focusing\") {\n        return {\n          label: \"On Break\",\n          timeRemaining: breakDuration * 60\n        };\n      }\n\n      return {\n        label: \"Focusing\",\n        timeRemaining: focusDuration * 60\n      };\n    };\n  }\n\n  useInterval(() => {\n    if (session.timeRemaining === 0) {\n      new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n      return setSession(nextSession(durations.focusDuration, durations.breakDuration));\n    }\n\n    return setSession(nextTick);\n  }, isTimerRunning ? 10 : null);\n  return (\n    /*#__PURE__*/\n    // <div className=\"pomodoro\">\n    React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(PomodoroTimeAdjusters, {\n      durations: durations,\n      setDurations: setDurations,\n      session: session,\n      setSession: setSession,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(PomodoroStartStop, {\n      isTimerRunning: isTimerRunning,\n      setIsTimerRunning: setIsTimerRunning,\n      durations: durations,\n      setSession: setSession,\n      session: session,\n      initialSessionState: initialSessionState,\n      setAriaValues: setAriaValues,\n      initialAraiValues: initialAriaValues,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(PomodoroTimerView, {\n      session: session,\n      durations: durations,\n      setSession: setSession,\n      isTimerRunning: isTimerRunning,\n      ariaValues: ariaValues,\n      setAriaValues: setAriaValues,\n      initialAraiValues: initialAriaValues,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }\n    }))\n  );\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["C:/Users/owner/Thinkful/qualified-assignments/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","classNames","useInterval","PomodoroTimeAdjusters","PomodoroTimerView","PomodoroStartStop","nextTick","prevState","timeRemaining","Math","max","Pomodoro","isTimerRunning","setIsTimerRunning","durations","setSession","session","initialSessionState","ariaValues","setAriaValues","initialAraiValues","setDurations","nextSession","focusDuration","breakDuration","currentSession","console","log","label","Audio","play","initialAriaValues"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport PomodoroTimeAdjusters from \"../PomodoroTimeAdjusters\";\nimport PomodoroTimerView from \"../PomodoroTimerView\";\nimport PomodoroStartStop from \"./PomodoroStartStop\";\n\n// These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return {\n    ...prevState,\n    timeRemaining,\n  };\n}\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\n\n\nfunction Pomodoro( {isTimerRunning, \n  setIsTimerRunning, \n  durations, \n  setSession, \n  session, \n  initialSessionState,\n  ariaValues,\n  setAriaValues,\n  initialAraiValues,\n  setDurations} ) {\n\n  \n  \n\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n \n   function nextSession(focusDuration, breakDuration) {\n    /**\n     * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n     */\n     return (currentSession) => {\n       console.log(session.label)\n      if (currentSession.label === \"Focusing\") {\n        return {\n          label: \"On Break\",\n          timeRemaining: breakDuration * 60,\n        };\n      }\n      return {\n        label: \"Focusing\",\n        timeRemaining: focusDuration * 60,\n      };\n    };\n  }\n\n  useInterval(() => {\n    if (session.timeRemaining === 0) {\n      new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n      return setSession(nextSession(durations.focusDuration, durations.breakDuration));\n    }\n    return setSession(nextTick);\n  },\n  isTimerRunning ? 10 : null\n);\n\n \n  \n\n  return (\n   // <div className=\"pomodoro\">\n   <React.Fragment>\n      <PomodoroTimeAdjusters durations = {durations} setDurations = {setDurations} session = {session} setSession={setSession}/>\n        <PomodoroStartStop \n        isTimerRunning = {isTimerRunning} \n        setIsTimerRunning = {setIsTimerRunning} \n        durations = {durations} \n        setSession = {setSession} \n        session={session} \n        initialSessionState={initialSessionState}\n        setAriaValues={setAriaValues}\n        initialAraiValues={initialAriaValues}\n        />\n        <PomodoroTimerView \n        session = {session} \n        durations = {durations} \n        setSession={setSession} \n        isTimerRunning={isTimerRunning}\n        ariaValues={ariaValues}\n        setAriaValues={setAriaValues}\n        initialAraiValues={initialAriaValues}/>\n  </React.Fragment>\n  );\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}