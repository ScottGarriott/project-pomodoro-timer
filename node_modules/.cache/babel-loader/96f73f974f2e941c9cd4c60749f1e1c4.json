{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\owner\\\\Thinkful\\\\qualified-assignments\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\PomodoroTimerView.js\";\nimport React, { useState } from \"react\";\nimport { minutesToDuration } from \"./utils/duration\";\nimport { secondsToDuration } from \"./utils/duration\";\nimport useInterval from \"../utils/useInterval\";\n\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return { ...prevState,\n    timeRemaining\n  };\n}\n\nfunction PomodoroTimerView({\n  session,\n  durations,\n  setSession,\n  isTimerRunning\n}) {\n  function nextSession(focusDuration, breakDuration) {\n    /**\r\n     * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\r\n     */\n    return currentSession => {\n      console.log(session.label);\n\n      if (currentSession.label === \"Focusing\") {\n        return {\n          label: \"On Break\",\n          timeRemaining: breakDuration * 60\n        };\n      }\n\n      return {\n        label: \"Focusing\",\n        timeRemaining: focusDuration * 60\n      };\n    };\n  }\n\n  useInterval(() => {\n    if (session.timeRemaining === 0) {\n      new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n      return setSession(nextSession(durations.focusDuration, durations.breakDuration));\n    }\n\n    return setSession(nextTick);\n  }, isTimerRunning ? 10 : null);\n\n  const sessionTotalDurationView = label => {\n    return minutesToDuration(label === \"Break\" ? durations.focusDuration : durations.breakDuration);\n  };\n\n  if (session.label !== \"\") {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      \"data-testid\": \"session-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 21\n      }\n    }, session.label, \" for \", sessionTotalDurationView(session.label), \" minutes\"), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"lead\",\n      \"data-testid\": \"session-sub-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 21\n      }\n    }, secondsToDuration(session === null || session === void 0 ? void 0 : session.timeRemaining), \" remaining\"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"progress\",\n      style: {\n        height: \"20px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"progress-bar\",\n      role: \"progressbar\",\n      \"aria-valuemin\": \"0\",\n      \"aria-valuemax\": \"100\",\n      \"aria-valuenow\": \"0\" // TODO: Increase aria-valuenow as elapsed time increases\n      ,\n      style: {\n        width: \"0%\"\n      } // TODO: Increase width % as elapsed time increases\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 21\n      }\n    })))));\n  }\n\n  return null;\n}\n\n;\nexport default PomodoroTimerView;","map":{"version":3,"sources":["C:/Users/owner/Thinkful/qualified-assignments/Project_Pomodoro_Timer_Qualified_1/src/PomodoroTimerView.js"],"names":["React","useState","minutesToDuration","secondsToDuration","useInterval","nextTick","prevState","timeRemaining","Math","max","PomodoroTimerView","session","durations","setSession","isTimerRunning","nextSession","focusDuration","breakDuration","currentSession","console","log","label","Audio","play","sessionTotalDurationView","height","width"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { minutesToDuration } from \"./utils/duration\";\r\nimport { secondsToDuration } from \"./utils/duration\";\r\nimport useInterval from \"../utils/useInterval\";\r\n\r\nfunction nextTick(prevState) {\r\n    const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\r\n    return {\r\n      ...prevState,\r\n      timeRemaining,\r\n    };\r\n  }\r\n\r\nfunction PomodoroTimerView ({ session, durations, setSession, isTimerRunning }) {\r\n\r\n    function nextSession(focusDuration, breakDuration) {\r\n        /**\r\n         * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\r\n         */\r\n         return (currentSession) => {\r\n           console.log(session.label)\r\n          if (currentSession.label === \"Focusing\") {\r\n            return {\r\n              label: \"On Break\",\r\n              timeRemaining: breakDuration * 60,\r\n            };\r\n          }\r\n          return {\r\n            label: \"Focusing\",\r\n            timeRemaining: focusDuration * 60,\r\n          };\r\n        };\r\n      }\r\n    \r\n      useInterval(() => {\r\n        if (session.timeRemaining === 0) {\r\n          new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\r\n          return setSession(nextSession(durations.focusDuration, durations.breakDuration));\r\n        }\r\n        return setSession(nextTick);\r\n      },\r\n      isTimerRunning ? 10 : null\r\n    );\r\n\r\n    const sessionTotalDurationView = (label) => {\r\n        return minutesToDuration(\r\n            label === \"Break\" ?  durations.focusDuration : durations.breakDuration\r\n            );\r\n    }\r\n\r\n    if(session.label !== \"\"){\r\n        return (\r\n            <>\r\n                <div className=\"row mb-2\">\r\n                <div className=\"col\">\r\n                    {/* TODO: Update message below to include current session (Focusing or On Break) total duration */}\r\n                    <h2 data-testid=\"session-title\">\r\n                                            {/*make this into its own function and call it instead of having the conditional in the JSX */}\r\n                    {session.label} for {sessionTotalDurationView(session.label)} minutes\r\n                    </h2>\r\n                    <p className=\"lead\" data-testid=\"session-sub-title\">\r\n                    {secondsToDuration(session?.timeRemaining)} remaining\r\n                    </p>\r\n                </div>\r\n                </div>\r\n                <div className=\"row mb-2\">\r\n                <div className=\"col\">\r\n                    <div className=\"progress\" style={{ height: \"20px\" }}>\r\n                    <div\r\n\r\n                        className=\"progress-bar\"\r\n                        role=\"progressbar\"\r\n                        aria-valuemin=\"0\"\r\n                        aria-valuemax=\"100\"\r\n                        aria-valuenow=\"0\" // TODO: Increase aria-valuenow as elapsed time increases\r\n                        style={{ width: \"0%\" }} // TODO: Increase width % as elapsed time increases\r\n                    />\r\n                    </div>\r\n                </div>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n    return null;\r\n};\r\n\r\nexport default PomodoroTimerView;"]},"metadata":{},"sourceType":"module"}