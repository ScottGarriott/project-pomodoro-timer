{"ast":null,"code":"import React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\"; // These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\n\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return { ...prevState,\n    timeRemaining\n  };\n}\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\n\n\nfunction Pomodoro({\n  durations,\n  setSession,\n  session,\n  isTimerRunning\n}) {\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n  useInterval(() => {\n    if (session.timeRemaining === 0) {\n      new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n      return setSession(nextSession(durations.focusDuration, durations.breakDuration));\n    }\n\n    return setSession(nextTick);\n  }, isTimerRunning ? 1000 : null);\n  return (\n    /*#__PURE__*/\n    // <div className=\"pomodoro\">\n    React.createElement(React.Fragment, null)\n  );\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["C:/Users/owner/Thinkful/qualified-assignments/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","classNames","useInterval","nextTick","prevState","timeRemaining","Math","max","Pomodoro","durations","setSession","session","isTimerRunning","Audio","play","nextSession","focusDuration","breakDuration"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,UAAP,MAAuB,sBAAvB;AACA,OAAOC,WAAP,MAAwB,sBAAxB,C,CAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,QAAT,CAAkBC,SAAlB,EAA6B;AAC3B,QAAMC,aAAa,GAAGC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYH,SAAS,CAACC,aAAV,GAA0B,CAAtC,CAAtB;AACA,SAAO,EACL,GAAGD,SADE;AAELC,IAAAA;AAFK,GAAP;AAID;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASG,QAAT,CAAmB;AAACC,EAAAA,SAAD;AAAYC,EAAAA,UAAZ;AAAwBC,EAAAA,OAAxB;AAAiCC,EAAAA;AAAjC,CAAnB,EAAsE;AAKpE;AACF;AACA;AACA;AACA;AACEV,EAAAA,WAAW,CAAC,MAAM;AACd,QAAIS,OAAO,CAACN,aAAR,KAA0B,CAA9B,EAAiC;AAC/B,UAAIQ,KAAJ,CAAU,8CAAV,EAA0DC,IAA1D;AACA,aAAOJ,UAAU,CAACK,WAAW,CAACN,SAAS,CAACO,aAAX,EAA0BP,SAAS,CAACQ,aAApC,CAAZ,CAAjB;AACD;;AACD,WAAOP,UAAU,CAACP,QAAD,CAAjB;AACD,GANQ,EAOTS,cAAc,GAAG,IAAH,GAAU,IAPf,CAAX;AAaA;AAAA;AACC;AACA;AAFD;AAMD;;AAED,eAAeJ,QAAf","sourcesContent":["import React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\n\n// These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return {\n    ...prevState,\n    timeRemaining,\n  };\n}\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\n\n\nfunction Pomodoro( {durations, setSession, session, isTimerRunning} ) {\n\n  \n  \n\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n  useInterval(() => {\n      if (session.timeRemaining === 0) {\n        new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n        return setSession(nextSession(durations.focusDuration, durations.breakDuration));\n      }\n      return setSession(nextTick);\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n \n  \n\n  return (\n   // <div className=\"pomodoro\">\n   <>\n      \n  </>\n  );\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}