{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\owner\\\\Thinkful\\\\qualified-assignments\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport PomodoroTimeAdjusters from \"./PomodoroTimeAdjusters\";\nimport PomodoroTimerView from \"./PomodoroTimerView\";\nimport PomodoroStartStop from \"./PomodoroStartStop\"; // These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\n//Timer duration states\n\nconst initialDurationState = {\n  focusDuration: 25,\n  breakDuration: 5\n};\nconst [durations, setDurations] = useState({ ...initialDurationState\n}); //Other states\n// Timer starts out paused\n\nconst [isTimerRunning, setIsTimerRunning] = useState(false);\nconst initialAriaValues = {\n  percentComplete: 0,\n  ariaValueNow: 0\n};\nconst [ariaValues, setAriaValues] = useState(initialAriaValues); // The current session - null where there is no session running\n\nconst initialSessionState = {\n  label: \"\",\n  timeRemaining: 0,\n  sessionDuration: 0,\n  totalSessionTime: 0\n};\nconst [session, setSession] = useState({ ...initialSessionState\n});\n\nfunction Pomodoro() {\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(PomodoroTimeAdjusters, {\n    durations: durations,\n    setDurations: setDurations,\n    session: session,\n    setSession: setSession,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(PomodoroStartStop, {\n    isTimerRunning: isTimerRunning,\n    setIsTimerRunning: setIsTimerRunning,\n    durations: durations,\n    setSession: setSession,\n    session: session,\n    initialSessionState: initialSessionState,\n    setAriaValues: setAriaValues,\n    initialAraiValues: initialAriaValues,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(PomodoroTimerView, {\n    session: session,\n    durations: durations,\n    setSession: setSession,\n    isTimerRunning: isTimerRunning,\n    ariaValues: ariaValues,\n    setAriaValues: setAriaValues,\n    initialAraiValues: initialAriaValues,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["C:/Users/owner/Thinkful/qualified-assignments/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","PomodoroTimeAdjusters","PomodoroTimerView","PomodoroStartStop","initialDurationState","focusDuration","breakDuration","durations","setDurations","isTimerRunning","setIsTimerRunning","initialAriaValues","percentComplete","ariaValueNow","ariaValues","setAriaValues","initialSessionState","label","timeRemaining","sessionDuration","totalSessionTime","session","setSession","Pomodoro"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,qBAAP,MAAkC,yBAAlC;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,iBAAP,MAA8B,qBAA9B,C,CAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,MAAMC,oBAAoB,GAAG;AAC3BC,EAAAA,aAAa,EAAE,EADY;AAE3BC,EAAAA,aAAa,EAAE;AAFY,CAA7B;AAIA,MAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,EAAC,GAAGI;AAAJ,CAAD,CAA1C,C,CAGA;AACA;;AACA,MAAM,CAACK,cAAD,EAAiBC,iBAAjB,IAAsCV,QAAQ,CAAC,KAAD,CAApD;AAEA,MAAMW,iBAAiB,GAAG;AAC1BC,EAAAA,eAAe,EAAE,CADS;AAE1BC,EAAAA,YAAY,EAAE;AAFY,CAA1B;AAMA,MAAM,CAACC,UAAD,EAAaC,aAAb,IAA8Bf,QAAQ,CAACW,iBAAD,CAA5C,C,CAEA;;AACA,MAAMK,mBAAmB,GAAG;AAC5BC,EAAAA,KAAK,EAAE,EADqB;AAE5BC,EAAAA,aAAa,EAAE,CAFa;AAG5BC,EAAAA,eAAe,EAAE,CAHW;AAI5BC,EAAAA,gBAAgB,EAAE;AAJU,CAA5B;AAMA,MAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBtB,QAAQ,CAAC,EAAC,GAAGgB;AAAJ,CAAD,CAAtC;;AAMA,SAASO,QAAT,GAAoB;AAKlB;AACF;AACA;AACA;AACA;AAME,sBACC,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACG,oBAAC,qBAAD;AAAuB,IAAA,SAAS,EAAIhB,SAApC;AAA+C,IAAA,YAAY,EAAIC,YAA/D;AAA6E,IAAA,OAAO,EAAIa,OAAxF;AAAiG,IAAA,UAAU,EAAEC,UAA7G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH,eAEK,oBAAC,iBAAD;AACA,IAAA,cAAc,EAAIb,cADlB;AAEA,IAAA,iBAAiB,EAAIC,iBAFrB;AAGA,IAAA,SAAS,EAAIH,SAHb;AAIA,IAAA,UAAU,EAAIe,UAJd;AAKA,IAAA,OAAO,EAAED,OALT;AAMA,IAAA,mBAAmB,EAAEL,mBANrB;AAOA,IAAA,aAAa,EAAED,aAPf;AAQA,IAAA,iBAAiB,EAAEJ,iBARnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFL,eAYK,oBAAC,iBAAD;AACA,IAAA,OAAO,EAAIU,OADX;AAEA,IAAA,SAAS,EAAId,SAFb;AAGA,IAAA,UAAU,EAAEe,UAHZ;AAIA,IAAA,cAAc,EAAEb,cAJhB;AAKA,IAAA,UAAU,EAAEK,UALZ;AAMA,IAAA,aAAa,EAAEC,aANf;AAOA,IAAA,iBAAiB,EAAEJ,iBAPnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAZL,CADD;AAuBD;;AAED,eAAeY,QAAf","sourcesContent":["import React, { useState } from \"react\";\nimport PomodoroTimeAdjusters from \"./PomodoroTimeAdjusters\";\nimport PomodoroTimerView from \"./PomodoroTimerView\";\nimport PomodoroStartStop from \"./PomodoroStartStop\";\n\n// These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\n\n//Timer duration states\nconst initialDurationState = {\n  focusDuration: 25,\n  breakDuration: 5\n};\nconst [durations, setDurations] = useState({...initialDurationState})\n\n\n//Other states\n// Timer starts out paused\nconst [isTimerRunning, setIsTimerRunning] = useState(false);\n\nconst initialAriaValues = {\npercentComplete: 0,\nariaValueNow: 0,\n\n};\n\nconst [ariaValues, setAriaValues] = useState(initialAriaValues);\n\n// The current session - null where there is no session running\nconst initialSessionState = {\nlabel: \"\",\ntimeRemaining: 0,\nsessionDuration: 0,\ntotalSessionTime: 0\n}\nconst [session, setSession] = useState({...initialSessionState});\n\n\n\n\n\nfunction Pomodoro() {\n\n  \n  \n\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n \n\n \n  \n\n  return (\n   <React.Fragment>\n      <PomodoroTimeAdjusters durations = {durations} setDurations = {setDurations} session = {session} setSession={setSession}/>\n        <PomodoroStartStop \n        isTimerRunning = {isTimerRunning} \n        setIsTimerRunning = {setIsTimerRunning} \n        durations = {durations} \n        setSession = {setSession} \n        session={session} \n        initialSessionState={initialSessionState}\n        setAriaValues={setAriaValues}\n        initialAraiValues={initialAriaValues}\n        />\n        <PomodoroTimerView \n        session = {session} \n        durations = {durations} \n        setSession={setSession} \n        isTimerRunning={isTimerRunning}\n        ariaValues={ariaValues}\n        setAriaValues={setAriaValues}\n        initialAraiValues={initialAriaValues}/>\n  </React.Fragment>\n  );\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}