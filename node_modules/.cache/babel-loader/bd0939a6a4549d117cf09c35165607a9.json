{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\owner\\\\Thinkful\\\\qualified-assignments\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport PomodoroTimeAdjusters from \"./PomodoroTimeAdjusters\";\nimport PomodoroTimerView from \"./PomodoroTimerView\";\nimport PomodoroStartStop from \"./PomodoroStartStop\"; // These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\n\nfunction Pomodoro() {\n  //Timer duration states\n  const initialDurationState = {\n    focusDuration: 25,\n    breakDuration: 5\n  };\n  const [durations, setDurations] = useState({ ...initialDurationState\n  }); //Other states\n  // Timer starts out paused\n  //const [isTimerRunning, setIsTimerRunning] = useState(false);\n\n  const initialAriaValues = {\n    percentComplete: 0,\n    ariaValueNow: 0\n  };\n  const [ariaValues, setAriaValues] = useState(initialAriaValues); // The current session - null where there is no session running\n\n  const initialSessionState = {\n    label: \"\",\n    timeRemaining: 0,\n    sessionDuration: 0,\n    totalSessionTime: 0,\n    stopDisabled: true,\n    isTimerRunning: false\n  };\n  const [session, setSession] = useState({ ...initialSessionState\n  });\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(PomodoroTimeAdjusters, {\n    durations: durations,\n    setDurations: setDurations,\n    session: session,\n    setSession: setSession,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(PomodoroStartStop //isTimerRunning = {isTimerRunning} \n  //setIsTimerRunning = {setIsTimerRunning} \n  , {\n    durations: durations,\n    setSession: setSession,\n    session: session,\n    initialSessionState: initialSessionState,\n    setAriaValues: setAriaValues,\n    initialAraiValues: initialAriaValues,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(PomodoroTimerView, {\n    session: session,\n    durations: durations,\n    setSession: setSession //isTimerRunning={isTimerRunning}\n    ,\n    ariaValues: ariaValues,\n    setAriaValues: setAriaValues,\n    initialAraiValues: initialAriaValues,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["C:/Users/owner/Thinkful/qualified-assignments/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","PomodoroTimeAdjusters","PomodoroTimerView","PomodoroStartStop","Pomodoro","initialDurationState","focusDuration","breakDuration","durations","setDurations","initialAriaValues","percentComplete","ariaValueNow","ariaValues","setAriaValues","initialSessionState","label","timeRemaining","sessionDuration","totalSessionTime","stopDisabled","isTimerRunning","session","setSession"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,qBAAP,MAAkC,yBAAlC;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,iBAAP,MAA8B,qBAA9B,C,CAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASC,QAAT,GAAoB;AAElB;AACF,QAAMC,oBAAoB,GAAG;AAC3BC,IAAAA,aAAa,EAAE,EADY;AAE3BC,IAAAA,aAAa,EAAE;AAFY,GAA7B;AAIA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,EAAC,GAAGK;AAAJ,GAAD,CAA1C,CAPoB,CAUpB;AACA;AACA;;AAEA,QAAMK,iBAAiB,GAAG;AAC1BC,IAAAA,eAAe,EAAE,CADS;AAE1BC,IAAAA,YAAY,EAAE;AAFY,GAA1B;AAMA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8Bd,QAAQ,CAACU,iBAAD,CAA5C,CApBoB,CAsBpB;;AACA,QAAMK,mBAAmB,GAAG;AAC5BC,IAAAA,KAAK,EAAE,EADqB;AAE5BC,IAAAA,aAAa,EAAE,CAFa;AAG5BC,IAAAA,eAAe,EAAE,CAHW;AAI5BC,IAAAA,gBAAgB,EAAE,CAJU;AAK5BC,IAAAA,YAAY,EAAE,IALc;AAM5BC,IAAAA,cAAc,EAAE;AANY,GAA5B;AAQA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBvB,QAAQ,CAAC,EAAC,GAAGe;AAAJ,GAAD,CAAtC;AAGE,sBACC,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACG,oBAAC,qBAAD;AAAuB,IAAA,SAAS,EAAIP,SAApC;AAA+C,IAAA,YAAY,EAAIC,YAA/D;AAA6E,IAAA,OAAO,EAAIa,OAAxF;AAAiG,IAAA,UAAU,EAAEC,UAA7G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH,eAEK,oBAAC,iBAAD,CACA;AACA;AAFA;AAGA,IAAA,SAAS,EAAIf,SAHb;AAIA,IAAA,UAAU,EAAIe,UAJd;AAKA,IAAA,OAAO,EAAED,OALT;AAMA,IAAA,mBAAmB,EAAEP,mBANrB;AAOA,IAAA,aAAa,EAAED,aAPf;AAQA,IAAA,iBAAiB,EAAEJ,iBARnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFL,eAYK,oBAAC,iBAAD;AACA,IAAA,OAAO,EAAIY,OADX;AAEA,IAAA,SAAS,EAAId,SAFb;AAGA,IAAA,UAAU,EAAEe,UAHZ,CAIA;AAJA;AAKA,IAAA,UAAU,EAAEV,UALZ;AAMA,IAAA,aAAa,EAAEC,aANf;AAOA,IAAA,iBAAiB,EAAEJ,iBAPnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAZL,CADD;AAuBD;;AAED,eAAeN,QAAf","sourcesContent":["import React, { useState } from \"react\";\nimport PomodoroTimeAdjusters from \"./PomodoroTimeAdjusters\";\nimport PomodoroTimerView from \"./PomodoroTimerView\";\nimport PomodoroStartStop from \"./PomodoroStartStop\";\n\n// These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\n\n\nfunction Pomodoro() {\n\n  //Timer duration states\nconst initialDurationState = {\n  focusDuration: 25,\n  breakDuration: 5\n};\nconst [durations, setDurations] = useState({...initialDurationState})\n\n\n//Other states\n// Timer starts out paused\n//const [isTimerRunning, setIsTimerRunning] = useState(false);\n\nconst initialAriaValues = {\npercentComplete: 0,\nariaValueNow: 0,\n\n};\n\nconst [ariaValues, setAriaValues] = useState(initialAriaValues);\n\n// The current session - null where there is no session running\nconst initialSessionState = {\nlabel: \"\",\ntimeRemaining: 0,\nsessionDuration: 0,\ntotalSessionTime: 0,\nstopDisabled: true,\nisTimerRunning: false\n}\nconst [session, setSession] = useState({...initialSessionState});  \n  \n\n  return (\n   <React.Fragment>\n      <PomodoroTimeAdjusters durations = {durations} setDurations = {setDurations} session = {session} setSession={setSession}/>\n        <PomodoroStartStop \n        //isTimerRunning = {isTimerRunning} \n        //setIsTimerRunning = {setIsTimerRunning} \n        durations = {durations} \n        setSession = {setSession} \n        session={session} \n        initialSessionState={initialSessionState}\n        setAriaValues={setAriaValues}\n        initialAraiValues={initialAriaValues}\n        />\n        <PomodoroTimerView \n        session = {session} \n        durations = {durations} \n        setSession={setSession} \n        //isTimerRunning={isTimerRunning}\n        ariaValues={ariaValues}\n        setAriaValues={setAriaValues}\n        initialAraiValues={initialAriaValues}/>\n  </React.Fragment>\n  );\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}