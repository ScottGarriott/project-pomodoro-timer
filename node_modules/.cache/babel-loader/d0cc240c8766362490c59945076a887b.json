{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\owner\\\\Thinkful\\\\qualified-assignments\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\PomodoroTimerView.js\";\nimport React, { useState } from \"react\";\nimport { minutesToDuration } from \"./utils/duration\";\nimport { secondsToDuration } from \"./utils/duration\";\nimport useInterval from \"./utils/useInterval\";\n\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return { ...prevState,\n    timeRemaining\n  };\n}\n\nfunction PomodoroTimerView({\n  session,\n  durations,\n  setSession,\n  isTimerRunning\n}) {\n  function nextSession(focusDuration, breakDuration) {\n    /**\r\n     * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\r\n     */\n    if (session.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60,\n        toatalSessionTime: breakDuration * 60\n      };\n    }\n\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60,\n      toatalSessionTime: breakDuration * 60\n    };\n  }\n\n  useInterval(() => {\n    if (session.timeRemaining === 0) {\n      new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n      return setSession(nextSession(durations.focusDuration, durations.breakDuration));\n    }\n\n    setSession(nextTick);\n    /*setSession((currentAriaValues) => {\r\n        return (\r\n            {\r\n              ariaValueNow: (session.ariaValueNow + (session.timeRemaining / session.totalSessionTime)),\r\n              percentComplete: (session.percentComplete + (session.timeRemaining / session.totalSessionTime)),\r\n            }\r\n        )\r\n    })*/\n  }, isTimerRunning ? 10 : null);\n\n  const sessionTotalDurationView = label => {\n    return minutesToDuration(console.log(label), label === \"Break\" ? durations.breakDuration : durations.focusDuration);\n  };\n\n  if (session.label !== \"\") {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      \"data-testid\": \"session-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }\n    }, session.label, \" for \", sessionTotalDurationView(session.label), \" minutes\"), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"lead\",\n      \"data-testid\": \"session-sub-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 21\n      }\n    }, secondsToDuration(session === null || session === void 0 ? void 0 : session.timeRemaining), \" remaining\"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"progress\",\n      style: {\n        height: \"20px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"progress-bar\",\n      role: \"progressbar\",\n      \"aria-valuemin\": \"0\",\n      \"aria-valuemax\": \"100\",\n      \"aria-valuenow\": session.ariaValueNow // TODO: Increase aria-valuenow as elapsed time increases\n      ,\n      style: {\n        width: `${session.percentComplete}%`\n      } // TODO: Increase width % as elapsed time increases\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }\n    })))));\n  }\n\n  return null;\n}\n\n;\nexport default PomodoroTimerView;","map":{"version":3,"sources":["C:/Users/owner/Thinkful/qualified-assignments/Project_Pomodoro_Timer_Qualified_1/src/PomodoroTimerView.js"],"names":["React","useState","minutesToDuration","secondsToDuration","useInterval","nextTick","prevState","timeRemaining","Math","max","PomodoroTimerView","session","durations","setSession","isTimerRunning","nextSession","focusDuration","breakDuration","label","toatalSessionTime","Audio","play","sessionTotalDurationView","console","log","height","ariaValueNow","width","percentComplete"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { minutesToDuration } from \"./utils/duration\";\r\nimport { secondsToDuration } from \"./utils/duration\";\r\nimport useInterval from \"./utils/useInterval\";\r\n\r\nfunction nextTick(prevState) {\r\n    const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\r\n    return {\r\n      ...prevState,\r\n      timeRemaining,\r\n    };\r\n  }\r\n\r\nfunction PomodoroTimerView ({ session, durations, setSession, isTimerRunning }) {\r\n\r\n    function nextSession(focusDuration, breakDuration) {\r\n        /**\r\n         * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\r\n         */\r\n          if (session.label === \"Focusing\") {\r\n            return {\r\n              label: \"On Break\",\r\n              timeRemaining: breakDuration * 60,\r\n              toatalSessionTime: breakDuration * 60\r\n            };\r\n          }\r\n          return {\r\n            label: \"Focusing\",\r\n            timeRemaining: focusDuration * 60,\r\n            toatalSessionTime: breakDuration * 60\r\n          };\r\n      }\r\n    \r\n      useInterval(() => {\r\n        if (session.timeRemaining === 0) {\r\n          new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\r\n          return setSession(nextSession(durations.focusDuration, durations.breakDuration));\r\n        }\r\n            \r\n            setSession(nextTick);\r\n            /*setSession((currentAriaValues) => {\r\n                return (\r\n                    {\r\n                      ariaValueNow: (session.ariaValueNow + (session.timeRemaining / session.totalSessionTime)),\r\n                      percentComplete: (session.percentComplete + (session.timeRemaining / session.totalSessionTime)),\r\n                    }\r\n                )\r\n            })*/\r\n       \r\n      },\r\n      isTimerRunning ? 10 : null\r\n    );\r\n\r\n    const sessionTotalDurationView = (label) => {\r\n        return minutesToDuration(\r\n            console.log(label),\r\n            label === \"Break\" ?  durations.breakDuration : durations.focusDuration\r\n            );\r\n    }\r\n\r\n    if(session.label !== \"\"){\r\n        return (\r\n            <>\r\n                <div className=\"row mb-2\">\r\n                <div className=\"col\">\r\n                    {/* TODO: Update message below to include current session (Focusing or On Break) total duration */}\r\n                    <h2 data-testid=\"session-title\">\r\n                                            {/*make this into its own function and call it instead of having the conditional in the JSX */}\r\n                    {session.label} for {sessionTotalDurationView(session.label)} minutes\r\n                    </h2>\r\n                    <p className=\"lead\" data-testid=\"session-sub-title\">\r\n                    {secondsToDuration(session?.timeRemaining)} remaining\r\n                    </p>\r\n                </div>\r\n                </div>\r\n                <div className=\"row mb-2\">\r\n                <div className=\"col\">\r\n                    <div className=\"progress\" style={{ height: \"20px\" }}>\r\n                    <div\r\n                        className=\"progress-bar\"\r\n                        role=\"progressbar\"\r\n                        aria-valuemin=\"0\"\r\n                        aria-valuemax=\"100\"\r\n                        aria-valuenow={session.ariaValueNow} // TODO: Increase aria-valuenow as elapsed time increases\r\n                        style={{ width: `${session.percentComplete}%` }} // TODO: Increase width % as elapsed time increases\r\n                    />\r\n                    </div>\r\n                </div>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n    return null;\r\n};\r\n\r\nexport default PomodoroTimerView;"]},"metadata":{},"sourceType":"module"}