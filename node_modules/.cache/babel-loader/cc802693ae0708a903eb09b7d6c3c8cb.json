{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\owner\\\\Thinkful\\\\qualified-assignments\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\PomodoroTimerView.js\";\nimport React from \"react\";\nimport { minutesToDuration } from \"../utils/duration\";\nimport { secondsToDuration } from \"../utils/duration\";\nimport useInterval from \"../utils/useInterval\";\n\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return { ...prevState,\n    timeRemaining\n  };\n}\n\nfunction PomodoroTimerView({\n  isTimerRunning,\n  session,\n  durations,\n  setSession\n}) {\n  function nextSession(focusDuration, breakDuration) {\n    /**\r\n     * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\r\n     */\n    return currentSession => {\n      if (currentSession.label === \"Focusing\") {\n        return {\n          label: \"On Break\",\n          timeRemaining: breakDuration * 60\n        };\n      }\n\n      return {\n        label: \"Focusing\",\n        timeRemaining: focusDuration * 60\n      };\n    };\n  }\n\n  useInterval(() => {\n    if (session.timeRemaining === 0) {\n      new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n      return setSession(nextSession(durations.focusDuration, durations.breakDuration));\n    }\n\n    setSession(nextTick);\n  }, isTimerRunning ? 1000 : null);\n\n  const sessionTotalDurationView = label => {\n    const result = label === \"Focusing\" ? durations.focusDuration : durations.breakDuration;\n    return minutesToDuration(result);\n  };\n\n  return session && /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    \"data-testid\": \"session-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 21\n    }\n  }, session.label, \" for \", sessionTotalDurationView(session.label), \" minutes\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"lead\",\n    \"data-testid\": \"session-sub-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 21\n    }\n  }, secondsToDuration(session && session.timeRemaining), \" remaining\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress\",\n    style: {\n      height: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress-bar\",\n    role: \"progressbar\",\n    \"aria-valuemin\": \"0\",\n    \"aria-valuemax\": \"100\",\n    \"aria-valuenow\": 100 - 100 * session.timeRemaining / (session.label === \"Focusing\" ? durations.focusDuration * 60 : durations.breakDuration * 60),\n    style: {\n      width: `${100 - 100 * session.timeRemaining / (session.label === \"Focusing\" ? durations.focusDuration * 60 : durations.breakDuration * 60)}%`\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 21\n    }\n  })))));\n}\n\nexport default PomodoroTimerView;","map":{"version":3,"sources":["C:/Users/owner/Thinkful/qualified-assignments/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/PomodoroTimerView.js"],"names":["React","minutesToDuration","secondsToDuration","useInterval","nextTick","prevState","timeRemaining","Math","max","PomodoroTimerView","isTimerRunning","session","durations","setSession","nextSession","focusDuration","breakDuration","currentSession","label","Audio","play","sessionTotalDurationView","result","height","width"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { minutesToDuration } from \"../utils/duration\";\r\nimport { secondsToDuration } from \"../utils/duration\";\r\nimport useInterval from \"../utils/useInterval\";\r\n\r\nfunction nextTick(prevState) {\r\n    const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\r\n    return {\r\n      ...prevState,\r\n      timeRemaining,\r\n    };\r\n  }\r\n\r\nfunction PomodoroTimerView ({  isTimerRunning, session, durations, setSession }) {\r\n   \r\n\r\n\r\n      function nextSession(focusDuration, breakDuration) {\r\n        /**\r\n         * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\r\n         */\r\n        return (currentSession) => {\r\n          if (currentSession.label === \"Focusing\") {\r\n            return {\r\n              label: \"On Break\",\r\n              timeRemaining: breakDuration * 60,\r\n            };\r\n          }\r\n          return {\r\n            label: \"Focusing\",\r\n            timeRemaining: focusDuration * 60,\r\n          };\r\n        };\r\n      }\r\n    \r\n      useInterval(() => {\r\n        if (session.timeRemaining === 0) {\r\n          new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\r\n          return (\r\n            setSession(nextSession(durations.focusDuration, durations.breakDuration))\r\n            );\r\n        }\r\n        \r\n            setSession(nextTick);\r\n            \r\n      },\r\n      isTimerRunning ? 1000 : null\r\n    );\r\n\r\n    const sessionTotalDurationView = (label) => {\r\n        const result = label === \"Focusing\" ?  durations.focusDuration : durations.breakDuration;\r\n        return minutesToDuration(result);\r\n    }\r\n\r\n    return (\r\n    session &&\r\n            <React.Fragment>\r\n                <div className=\"row mb-2\">\r\n                <div className=\"col\">\r\n                    <h2 data-testid=\"session-title\">\r\n                    {session.label} for {sessionTotalDurationView(session.label)} minutes\r\n                    </h2>\r\n                    <p className=\"lead\" data-testid=\"session-sub-title\">\r\n                    {secondsToDuration(session && session.timeRemaining)} remaining\r\n                    </p>\r\n                </div>\r\n                </div>\r\n                <div className=\"row mb-2\">\r\n                <div className=\"col\">\r\n                    <div className=\"progress\" style={{ height: \"20px\" }}>\r\n                    <div\r\n                        className=\"progress-bar\"\r\n                        role=\"progressbar\"\r\n                        aria-valuemin=\"0\"\r\n                        aria-valuemax=\"100\"\r\n                        aria-valuenow={\r\n                          100 - (100 * session.timeRemaining) / \r\n                          (session.label === \"Focusing\"\r\n                          ? durations.focusDuration * 60\r\n                          : durations.breakDuration * 60)\r\n                        } \r\n                        style={{ width: `${\r\n                          100 - (100 * session.timeRemaining) / \r\n                          (session.label === \"Focusing\"\r\n                          ? durations.focusDuration * 60\r\n                          : durations.breakDuration * 60)\r\n                        }%`  }} \r\n                    />\r\n                    </div>\r\n                </div>\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\nexport default PomodoroTimerView;"]},"metadata":{},"sourceType":"module"}